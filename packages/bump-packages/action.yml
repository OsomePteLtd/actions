# action.yml
name: 'Bump Packages'
description: 'Bump packages version'

inputs:
  token:
    required: true
    description: 'Github Token'
  prToken:
    required: true
    description: 'token for approving pull request'
  slackChannelId:
    required: false
    description: 'Slack channel_id for sending notification'

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.token }}

    - name: Read nvmrc
      id: read-nvmrc
      run: echo "version=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ steps.read-nvmrc.outputs.version }}

    - name: Disable git hooks
      run: |
        directory="./.husky"
        if [ -d "$directory" ]; then
          git config --local core.hooksPath .git/hooks
        fi
      shell: bash

    - name: Set auth token
      run: echo "//npm.pkg.github.com/:_authToken=${{ inputs.token }}" >> ~/.npmrc
      shell: bash

    - name: Install last version
      run: |
        packages=(
          '@osome/chatsome'
          '@osome/client-ui-kit'
          '@osome/server-toolkit'
          '@osome/ui-kit'
          '@osomepteltd/accounting-aggregations'
          '@osomepteltd/accounting-mapping'
          '@osomepteltd/accounting-number'
          '@osomepteltd/accounting-validation'
          '@osomepteltd/agent-kit'
          '@osomepteltd/agent-ui-kit'
          '@osomepteltd/client-sdk'
          '@osomepteltd/coolkit'
          '@osomepteltd/sdk'
          '@osomepteltd/structure-lint'
          '@osomepteltd/websome-kit'
          )
        dependencies=$(jq -r '.dependencies | keys[]' package.json | grep '@osome')
        devDependencies=$(jq -r '.devDependencies | keys[]' package.json | grep '@osome')
        updatedPackages=()
        for i in ${dependencies}; do
          if [[ " ${packages[*]} " =~ " ${i} " ]]; then
            echo "package ${i} in dependencies"
            installedVersion=$(cat package.json | grep ${i} | awk -F^ '{ print $2}' | sed 's/\"\,//')
            latestVersion=$(npm view  ${i} version)
            echo "latestVersion -> ${latestVersion}"
            echo "installedVersion -> ${installedVersion}" 
            if [ "$installedVersion" == "$latestVersion" ]; then
              echo "The latest version of ${i} is already installed"
            else
              npm i -S ${i}@latest
              updatedPackages+=("$i")
            fi
          fi
        done
        for i in ${devDependencies}; do
          if [[ " ${packages[*]} " =~ " ${i} " ]]; then
            echo "package ${i} in devDependencies"
            installedVersion=$(cat package.json | grep ${i} | awk -F^ '{ print $2}' | sed 's/\"\,//')
            latestVersion=$(npm view  ${i} version)
            echo "latestVersion -> ${latestVersion}"
            echo "installedVersion -> ${installedVersion}" 
            if [ "$installedVersion" == "$latestVersion" ]; then
              echo "The latest version of ${i} is already installed"
            else
              npm i -D ${i}@latest
              updatedPackages+=("$i")
            fi
          fi
        done
        echo "UPDATED_PACKAGES=${updatedPackages[@]}" >> $GITHUB_ENV
        echo "Updated packages ---> ${updatedPackages[@]}"
      shell: bash

    - name: Check github-actor
      run: |
        if [ "${{ github.actor }}" = "osome-bot" ]; then
          echo "Workflow triggered from slack reviewer will not set"
        else
          echo "reviewer=${{ github.actor }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Create Pull Request
      id: cpr
      if: ${{ env.UPDATED_PACKAGES != '' }}
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ inputs.token }}
        commit-message: Bump package to the latest version
        committer: GitHub <noreply@github.com>
        author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        signoff: false
        branch: bump-package
        branch-suffix: random
        base: main
        delete-branch: true
        reviewers: ${{ env.reviewer }}
        title: 'Bump packages'
        body: |
          Bump packages to the latest version
        labels: |
          bump
          automated pr
        draft: false

    - name: Check outputs
      if: ${{ steps.cpr.outputs.pull-request-number }}
      run: |
        echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
      shell: bash

    - name: Is pr created
      if: ${{ env.UPDATED_PACKAGES != '' }}
      run: |
        if [ -z "${{ steps.cpr.outputs.pull-request-url }}" ]; then
          echo "Pull request did not create, please read logs from the previous steps"
        fi
      shell: bash

    - name: cancelling
      if: ${{ env.UPDATED_PACKAGES == '' }}
      uses: andymckay/cancel-action@0.3
      with:
        token: ${{ inputs.token }}

    - name: wait for run cancellation
      if: ${{ env.UPDATED_PACKAGES == '' }}
      run: while true; do echo "Waiting for job to be cancelled"; sleep 5; done
      shell: bash

    - name: Post to a Slack channel
      if: ${{ steps.cpr.outputs.pull-request-url && github.actor == 'slack-bot' }}"
      id: slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: D037N76E5AN
        slack-message: '<${{ steps.cpr.outputs.pull-request-url }}|Bamp packages pull request url>'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}

    - name: Approve a PR
      run: gh pr review --approve "$PR_URL"
      env:
        PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
        GITHUB_TOKEN: ${{ inputs.prToken }}
      shell: bash

    - name: Enable auto-merge for PR
      run: gh pr merge --auto --squash "$PR_URL"
      env:
        PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
        GITHUB_TOKEN: ${{ inputs.token }}
      shell: bash
